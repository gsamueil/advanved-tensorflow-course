# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'multii.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import scipy
import icon_rc
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QApplication, QWidget, QPushButton, QHBoxLayout, QVBoxLayout, QShortcut, QLabel, QSlider, QStyle, QSizePolicy, QFileDialog, QTableWidgetItem, QMessageBox
import numpy as np
from matplotlib.widgets import RangeSlider
import matplotlib.pyplot as plt
import matplotlib
from matplotlib.figure import Figure
from matplotlib.animation import FuncAnimation
import nibabel as nib
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as Canvas
import sys
#from main import *
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg
from matplotlib.widgets import Cursor
import matplotlib.lines as lines
import time
from matplotlib.widgets import EllipseSelector , PolygonSelector , LassoSelector
from matplotlib.path import Path
from shapely import Polygon
from matplotlib.patches import Ellipse
from matplotlib.lines import Line2D
import math
matplotlib.use('Qt5Agg')

import matplotlib.patches as patches



class linedistance:
      

    def __init__(self, ax, table , num):
        self.canvas = ax.figure.canvas
     
        self.nums = num
        self.table = table

   
        # Ensure that we have separate colors for each object
       

        self.lasso = LassoSelector(ax, onselect=self.onselect)
       

    def onselect(self, verts):
        path = Path(verts)
  
        print(verts)
        startx ,starty = verts[0]
        endx, endy = verts[-1]
        p1 = [startx, starty]
        p2 = [endx, endy]
        distance = math.sqrt( ((p1[0]-p2[0])**2)+((p1[1]-p2[1])**2) )
        newitem = QTableWidgetItem(str(distance))
        self.table.setItem(2,self.nums, newitem)
        self.table.show()




   

#================================================
class SelectFromellipse:
 

    def __init__(self, ax, table , nums ):
        self.canvas = ax.figure.canvas
        self.elipse =EllipseSelector(
            ax, self.select_callback,
            useblit=True,
            button=[1, 3],  # disable middle button
            minspanx=3 , minspany=3,
            spancoords='pixels',
            interactive=True)
        self.nums = nums
        self.table = table

    def select_callback(self , eclick, erelease):
        x1, y1 = eclick.xdata, eclick.ydata
        x2, y2 = erelease.xdata, erelease.ydata
        area = 3.141592 * (x2-x1)/2* (y2-y1)/2
        newitem = QTableWidgetItem(str(area))
        self.table.setItem(0,self.nums, newitem)
        self.table.show()
    def disconnect(self):
        self.lasso.disconnect_events()


class SelectFromCollection:
 

    def __init__(self, ax, table , nums ,alpha_other=0.3):
        self.canvas = ax.figure.canvas
        self.alpha_other = alpha_other
        self.poly = PolygonSelector(ax, self.onselect ,useblit=False, props= dict(color='red', linestyle='-', linewidth=2, alpha=0.5) )
        self.ind = []
        self.nums = nums
        self.table = table

    def onselect(self, verts):
        path = Path(verts)
        verts = [round(x) if isinstance(x, float) else x for x in verts]
        print('ok')
        self.ind = verts
        poly = Polygon(tuple(self.ind))
        newitem = QTableWidgetItem(str(poly.area))
        self.table.setItem(1,self.nums, newitem)
        self.table.show()
        
    def callback_clear_selection(self):
        self.poly.clear()
    def get_verts(self):
        return self.ind ,  self.canvas
    def disconnect(self):
        self.poly.disconnect_events()



class draggable_lines:
    def __init__(self, ax, canva , canvas , volume_data , kind, XorY):
        self.axial =  canvas[0]
        self.sagital = canvas [1] 
        self.coronal = canvas [2]
        self.ax = ax
        self.c = canva
        self.o = kind
        self.XorY = XorY
        self.volume_data = volume_data
        self.line = 0
        
        if self.c == self.axial: 
            if kind == "h":
                x = [0 , 512]
                y = [XorY, XorY]
            elif kind == "v":
                x = [XorY, XorY]
                y = [0 , 512]
        elif self.c == self.coronal: 
            if kind == "h":
                x = [0 , 512]
                y = [XorY, XorY]
            elif kind == "v":
                x = [XorY, XorY]
                y = [0 ,234 ]
        elif self.c == self.sagital: 
            if kind == "h":
                x = [0 , 512]
                y = [XorY, XorY]
            elif kind == "v":
                x = [XorY, XorY]
                y = [0 , 234]

        if self.o == "h":
            self.line = lines.Line2D(x, y, picker=5, linewidth=1 , color='green')
        else:
            self.line = lines.Line2D(x, y, picker=5, linewidth=1 , color='red')

        self.ax.add_line(self.line)
        self.c.draw_idle()
        self.click = self.c.mpl_connect('pick_event', self.clickonline)

    def disconnect_functions(self):
        self.c.mpl_disconnect(self.click)
        
    def connect_functions(self):
        self.click = self.c.mpl_connect('pick_event', self.clickonline)

    def get_objects(self , arr):
        self.line_arr = arr

    
    def clickonline(self, event):
        if event.artist == self.line:

            self.follower = self.c.mpl_connect("motion_notify_event", self.followmouse)
            self.releaser = self.c.mpl_connect("button_press_event", self.releaseonclick)


    def followmouse(self, event):
        if self.o == "h":
            self.line.set_ydata([event.ydata, event.ydata])
            if self.c == self.axial: 
                self.on_press_axial(event)
            elif self.c == self.coronal: 
                self.on_press_coronal(event)
            elif self.c == self.sagital: 
                self.on_press_sagital(event)

        else:
            self.line.set_xdata([event.xdata, event.xdata])
            if self.c == self.axial: 
                self.on_press_axial(event)
            elif self.c == self.coronal: 
                self.on_press_coronal( event)
            elif self.c == self.sagital: 
                self.on_press_sagital(event)
        self.c.draw_idle()

    def releaseonclick(self, event):

        if self.o == "h":
            self.XorY = self.line.get_ydata()[0]
        else:
            self.XorY = self.line.get_xdata()[0]

        

        self.c.mpl_disconnect(self.releaser)
        self.c.mpl_disconnect(self.follower)
    def on_press_sagital(self, event):
        y = event.ydata
        y = round(y)
        x = event.xdata
        x = round(x)
        if self.o == "h":
            self.line_arr[4].line.set_ydata(y)
            self.axial.axes.imshow(
                self.volume_data[:, :, -y], cmap='gray', vmax=255, vmin=0 , origin='upper')
            self.axial.draw()
            self.coronal.draw()

        
        else:
            self.line_arr[1].line.set_xdata(x)
            self.coronal.axes.imshow(
                np.rot90(self.volume_data[:,x , :]), cmap='gray', vmax=255, vmin=0 ,        origin='upper')
            self.coronal.draw()
            self.axial.draw()


    def on_press_coronal(self, event):
        y = event.ydata
        y = round(y)
        x = event.xdata
        x = round(x)
        if self.o == "h":
            self.line_arr[2].line.set_ydata(y)
            self.axial.axes.imshow(
                 
                self.volume_data[:, :, -y], cmap='gray', vmax=255, vmin=0 , origin='upper')
            self.axial.draw()
            self.sagital.draw()

        else:
            self.line_arr[0].line.set_ydata(x)
            self.sagital.axes.imshow(
                np.rot90(self.volume_data[x,:, :]), cmap='gray', vmax=255, vmin=0 , origin='upper')
            self.sagital.draw()
            self.axial.draw()


    def on_press_axial(self, event):
        y = event.ydata
        y = round(y)
        x = event.xdata
        x = round(x)
        
        if self.o == "h":
            # self.line_arr[5].line.set_ydata([event.xdata, event.xdata])
            self.line_arr[5].line.set_xdata(y)
            self.sagital.axes.imshow(
            np.rot90( self.volume_data[y, :, :]), cmap='gray', vmax=255, vmin=0 , origin='upper')
            self.sagital.draw()
            self.coronal.draw()


        else:
            self.line_arr[3].line.set_xdata(x)
            # self.line_arr[4].line.set_ydata([event.ydata, event.ydata])
            self.coronal.axes.imshow(
                np.rot90(self.volume_data[:, x, :]), cmap='gray', vmax=255, vmin=0 , origin='upper')
            self.coronal.draw()
            self.sagital.draw()

    



class MatplotlibCanvas(FigureCanvasQTAgg):
    def __init__(self, parent=None):
        fig = Figure( dpi =140, facecolor='black')
        self.axes = fig.add_subplot(111)
        self.axes.spines['bottom'].set_color('white')
        self.axes.spines['top'].set_color('white')
        self.axes.spines['right'].set_color('white')
        self.axes.spines['left'].set_color('white')
        # fig.tight_layout()
        super(MatplotlibCanvas, self).__init__(fig)
    
    
            





class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1565, 883)
        MainWindow.setStyleSheet("background-color:rgb(0, 0, 0);  ")
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(50, 50, 50))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(75, 75, 75))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(42, 42, 42))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(33, 33, 33))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(38, 38, 38))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(240, 240, 240))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(75, 75, 75))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(240, 240, 240))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(36, 36, 36))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(50, 50, 50))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(25, 25, 25))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(43, 43, 43))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(240, 240, 240, 128))
        brush.setStyle(QtCore.Qt.SolidPattern)

        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(37, 37, 37))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(43, 43, 43))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(240, 240, 240, 128))
        brush.setStyle(QtCore.Qt.SolidPattern)
        MainWindow.setPalette(palette)
        MainWindow.setTabShape(QtWidgets.QTabWidget.Rounded)
        MainWindow.setDockNestingEnabled(True)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setObjectName("verticalLayout")
        self.horizontalLayout_16 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_16.setObjectName("horizontalLayout_16")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout()
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.horizontalLayout_14 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_14.setObjectName("horizontalLayout_14")
        self.horizontalLayout_13 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_13.setObjectName("horizontalLayout_13")
        self.widget = QtWidgets.QWidget(self.centralwidget)

        self.widget.setObjectName("widget")
        self.horizontalLayout_14.addWidget(self.widget)
        self.verticalLayout_3.addLayout(self.horizontalLayout_14)
        self.line = QtWidgets.QFrame(self.centralwidget)
        self.line.setFrameShape(QtWidgets.QFrame.HLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")
        self.verticalLayout_3.addWidget(self.line)
        self.horizontalLayout_15 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_15.setObjectName("horizontalLayout_15")
        self.widget_3 = QtWidgets.QWidget(self.centralwidget)
        self.widget_3.setObjectName("widget_3")
        self.horizontalLayout_15.addWidget(self.widget_3)
        self.verticalLayout_3.addLayout(self.horizontalLayout_15)
        self.horizontalLayout_16.addLayout(self.verticalLayout_3)
        self.line_2 = QtWidgets.QFrame(self.centralwidget)
        self.line_2.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_2.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_2.setObjectName("line_2")
        self.horizontalLayout_16.addWidget(self.line_2)
        self.verticalLayout_2 = QtWidgets.QVBoxLayout()
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.widget_2 = QtWidgets.QWidget(self.centralwidget)
        self.widget_2.setObjectName("widget_2")
        self.horizontalLayout_4.addWidget(self.widget_2)
        self.verticalLayout_2.addLayout(self.horizontalLayout_4)
        self.line_3 = QtWidgets.QFrame(self.centralwidget)
        self.line_3.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_3.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_3.setObjectName("line_3")
        self.verticalLayout_2.addWidget(self.line_3)
        # self.horizontalLayout_13 = QtWidgets.QHBoxLayout()
        # self.horizontalLayout_13.setObjectName("horizontalLayout_13")
        self.widget_4 = QtWidgets.QWidget(self.centralwidget)
        self.widget_4.setObjectName("widget_4")
        self.horizontalLayout_13.addWidget(self.widget_4)
        self.verticalLayout_2.addLayout(self.horizontalLayout_13)
        self.horizontalLayout_16.addLayout(self.verticalLayout_2)
        self.verticalLayout.addLayout(self.horizontalLayout_16)
        self.horizontalLayout.addLayout(self.verticalLayout)
        self.gridLayout_2.addLayout(self.horizontalLayout, 0, 0, 1, 1)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1228, 22))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.toolBar = QtWidgets.QToolBar(MainWindow)
        self.toolBar.setToolTipDuration(0)
        self.toolBar.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.toolBar.setMovable(True)
        self.toolBar.setAllowedAreas(QtCore.Qt.AllToolBarAreas)
        self.toolBar.setOrientation(QtCore.Qt.Vertical)
        self.toolBar.setIconSize(QtCore.QSize(50,40 ))
        self.toolBar.setToolButtonStyle(QtCore.Qt.ToolButtonIconOnly)
        self.toolBar.setObjectName("toolBar")
        MainWindow.addToolBar(QtCore.Qt.LeftToolBarArea, self.toolBar)
        self.Browse = QtWidgets.QAction(MainWindow)
        self.Browse.setCheckable(True)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(":/newPrefix/box.png"),
                       QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.Browse.setIcon(icon)
        self.Browse.setObjectName("Browse")
        self.clear = QtWidgets.QAction(MainWindow)
        self.clear.setCheckable(False)
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap(":/newPrefix/eraser.png"),
                        QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.clear.setIcon(icon1)
        self.clear.setObjectName("clear")
        self.actionaxis = QtWidgets.QAction(MainWindow)
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap(":/newPrefix/axis.png"),
                        QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionaxis.setIcon(icon2)
        self.actionaxis.setObjectName("actionaxis")
        self.actiontext_box = QtWidgets.QAction(MainWindow)
        self.actiontext_box.setObjectName("actiontext_box")
        self.action = QtWidgets.QAction(MainWindow)
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap(":/newPrefix/marker.png"),
                        QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.action.setIcon(icon3)
        self.action.setObjectName("action")
        self.actionscreenshot = QtWidgets.QAction(MainWindow)
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap(":/newPrefix/screenshot.png"),
                        QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionscreenshot.setIcon(icon4)
        self.actionscreenshot.setObjectName("actionscreenshot")
        self.toolBar.addAction(self.Browse)
        self.toolBar.addAction(self.actiontext_box)
        self.toolBar.addAction(self.clear)
        self.toolBar.addAction(self.action)
        self.toolBar.addAction(self.actionaxis)
        self.toolBar.addSeparator()
        self.toolBar.addAction(self.actionscreenshot)
        ###################################################################################################
        self.dockWidget_3 = QtWidgets.QDockWidget(MainWindow)
        self.dockWidget_3.setFloating(False)
        self.dockWidget_3.setObjectName("dockWidget_3")
        self.dockWidgetContents_5 = QtWidgets.QWidget()
        self.dockWidgetContents_5.setObjectName("dockWidgetContents_5")
        self.gridLayout = QtWidgets.QGridLayout(self.dockWidgetContents_5)
        self.gridLayout.setObjectName("gridLayout")
        self.scrollArea_2 = QtWidgets.QScrollArea(self.dockWidgetContents_5)
        self.scrollArea_2.setFrameShape(QtWidgets.QFrame.WinPanel)
        self.scrollArea_2.setFrameShadow(QtWidgets.QFrame.Plain)
        self.scrollArea_2.setLineWidth(3)
        self.scrollArea_2.setMidLineWidth(1)
        self.scrollArea_2.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAsNeeded)
        self.scrollArea_2.setSizeAdjustPolicy(QtWidgets.QAbstractScrollArea.AdjustToContents)
        self.scrollArea_2.setWidgetResizable(True)
        self.scrollArea_2.setObjectName("scrollArea_2")
        self.scrollAreaWidgetContents_2 = QtWidgets.QWidget()
        self.scrollAreaWidgetContents_2.setGeometry(QtCore.QRect(0, 0, 525, 798))
        self.scrollAreaWidgetContents_2.setObjectName("scrollAreaWidgetContents_2")
        self.verticalLayout_5 = QtWidgets.QVBoxLayout(self.scrollAreaWidgetContents_2)
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.groupBox = QtWidgets.QGroupBox(self.scrollAreaWidgetContents_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.MinimumExpanding)
        sizePolicy.setHorizontalStretch(1)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.groupBox.sizePolicy().hasHeightForWidth())
        self.groupBox.setSizePolicy(sizePolicy)
        self.groupBox.setMinimumSize(QtCore.QSize(300, 300))
        self.groupBox.setMaximumSize(QtCore.QSize(500, 250))
        self.groupBox.setFocusPolicy(QtCore.Qt.NoFocus)
        self.groupBox.setFlat(True)
        self.groupBox.setCheckable(False)
        self.groupBox.setObjectName("groupBox")
        self.groupBox.setPalette(palette)
        self.gridLayout_3 = QtWidgets.QGridLayout(self.groupBox)
        self.gridLayout_3.setObjectName("gridLayout_3")
        self.slider = QtWidgets.QSlider(self.groupBox)
        self.slider.setOrientation(QtCore.Qt.Horizontal)
        self.slider.setObjectName("horizontalSlider")
        self.gridLayout_3.addWidget(self.slider, 2, 0, 1, 1)
        self.slider2 = QtWidgets.QSlider(self.groupBox)
        self.slider2.setOrientation(QtCore.Qt.Horizontal)
        self.slider2.setObjectName("horizontalSlider_2")
        self.gridLayout_3.addWidget(self.slider2, 1, 0, 1, 1)
        self.verticalLayout_5.addWidget(self.groupBox)
        self.groupBox_2 = QtWidgets.QGroupBox(self.scrollAreaWidgetContents_2)
        self.groupBox_2.setMinimumSize(QtCore.QSize(300, 300))
        self.groupBox_2.setMaximumSize(QtCore.QSize(500, 750))
        self.groupBox_2.setObjectName("groupBox_2")
        self.groupBox_2.setPalette(palette)
        self.tableView = QtWidgets.QTableWidget(3,4, self.groupBox_2)
        self.tableView.setGeometry(QtCore.QRect(30, 60, 500, 500))
        self.tableView.setObjectName("tableView")
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(231, 230, 225))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(154, 153, 150))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(231, 230, 225))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(192, 191, 187))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(77, 77, 75))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(103, 102, 100))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(231, 230, 225))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(231, 230, 225))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(154, 153, 150))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(231, 230, 225))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(204, 204, 202))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(231, 230, 225))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ToolTipText, brush)

        brush = QtGui.QBrush(QtGui.QColor(240, 240, 240))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(50, 50, 50))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(75, 75, 75))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(42, 42, 42))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(33, 33, 33))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(38, 38, 38))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(75, 75, 75))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(36, 36, 36))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(50, 50, 50))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(25, 25, 25))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(43, 43, 43))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(231, 230, 225))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ToolTipText, brush)

        brush = QtGui.QBrush(QtGui.QColor(77, 77, 75))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(154, 153, 150))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(231, 230, 225))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(192, 191, 187))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(77, 77, 75))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(103, 102, 100))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(77, 77, 75))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(77, 77, 75))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(154, 153, 150))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(154, 153, 150))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(37, 37, 37))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(43, 43, 43))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(231, 230, 225))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ToolTipText, brush)
     
       
        self.tableView.setPalette(palette)
        self.tableView.setStyleSheet("background-color:#808080;  ")
        self.verticalLayout_5.addWidget(self.groupBox_2)
        self.scrollArea_2.setWidget(self.scrollAreaWidgetContents_2)
        self.gridLayout.addWidget(self.scrollArea_2, 1, 0, 1, 1)
        self.dockWidget_3.setWidget(self.dockWidgetContents_5)
        MainWindow.addDockWidget(QtCore.Qt.DockWidgetArea(1), self.dockWidget_3)
        ####################
      

    
        self.slider.setMinimum(-512)
        self.slider.setMaximum(512)
        self.slider.setTickInterval(1)
        self.slider.setValue(0)
        self.slider2.setMinimum(-512)
        self.slider2.setMaximum(512)
        self.slider2.setTickInterval(1)
        self.slider2.setValue(0)


      ########################################

        #####################################################################################################
        self.canva_flag = -1
        self.flag=0
        self.axial = MatplotlibCanvas(self)
        self.axial.axes.tick_params(axis='x', colors='white')    #setting up X-axis tick color to red
        self.axial.axes.tick_params(axis='y', colors='white')
        self.axial.axes.set_title('Axial View',  y=1.0, pad=-14)

        self.axial.axes.title.set_color('white')

        self.sagital = MatplotlibCanvas(self)
        self.sagital.axes.tick_params(axis='x', colors='white')    #setting up X-axis tick color to red
        self.sagital.axes.tick_params(axis='y', colors='white')
        self.sagital.axes.set_title('Sagital View', x = 0.75 ,   y=-0.1, pad=-14)
        self.sagital.axes.title.set_color('white')

        self.coronal = MatplotlibCanvas(self)
        self.coronal.axes.tick_params(axis='x', colors='white')    #setting up X-axis tick color to red
        self.coronal.axes.tick_params(axis='y', colors='white')
        self.coronal.axes.set_title('Coronal View', x = 0.75 , y=1.0 ,pad=-14)
        self.coronal.axes.title.set_color('white')

        self.oblique = MatplotlibCanvas(self)
        self.oblique.axes.tick_params(axis='x', colors='white')    #setting up X-axis tick color to red
        self.oblique.axes.tick_params(axis='y', colors='white')
        self.oblique.axes.set_title('Oblique View', x = 0.75 , y=1.0 ,pad=-14)
        self.oblique.axes.title.set_color('white')
        self.canvas_arr = [self.axial , self.sagital , self.coronal ,self.oblique]
        
        self.volume_data = np.array([])
        self.Browse.triggered.connect(self.image_browsing)
        self.actionscreenshot.triggered.connect(self.selector_tool)
        self.clear.triggered.connect(self.remove_tools)
        self.action.triggered.connect(self.remove_tools)
        self.action.triggered.connect(self.polygon_tool)
        self.actionaxis.triggered.connect(self.disselector_tool)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        self.retranslateUi(MainWindow)

###################

    def setData(self):
        self.tableView.clear()
        horHeaders = [ 'Axial', 'Sagital' , ' Coronal ' , 'Oblique'  ]
        verHeaders = [ 'Elipse Area' , 'Polygon area', 'Stright Line distance ' ]
        # print(key)
        # newitem = QTableWidgetItem(key)
        # self.tableView.setItem(n, 0, newitem)
        # item = self.image_process.image_details.get(key)
        # print(item)
        # newitem = QTableWidgetItem(item)
        # self.tableView.setItem(n, 1, newitem)

        self.tableView.setHorizontalHeaderLabels(horHeaders)
        self.tableView.setVerticalHeaderLabels(verHeaders)
        self.tableView.show()
    
    def dOblique(self):
        self.obliqueLine.set_visible(False)
        if self.flag == 0:
            try:
                self.obliqueLine.remove()
            except:
                pass
            self.flag = self.flag +1  
        
        val=self.slider.value()
        val2=511-self.slider2.value()
        val3=self.slider2.value()+511
        self.slope=1
        self.point=[0,0]
        if self.slider2.value()>=0:
            self.slope=(self.point[1]-val2)/(self.point[0]-511)
        elif self.slider2.value() < 0:
            self.slope=(self.point[1]-511)/(self.point[0]-val3) 
        if self.slider.value()>=0:
            self.point=[val,0]
        elif  self.slider.value()<0:
            self.point=[0,-val]
        
        self.obliqueLine = self.axial.axes.axline(self.point,slope=self.slope)
        self.drag_line_arr = [ self.axialhline_axial ,  self.axialvline_axial ,  self.axialhline_sagital ,  self.axialvline_sagital ,  self.axialhline_coronal ,  self.axialvline_coronal ]
        for i in range(len(self.drag_line_arr)-1)  :
            self.drag_line_arr[i].get_objects( self.drag_line_arr)
        self.obliqueLine.set_visible(True)
        self.axial.draw()
        self.axial.flush_events()
        #self.axial.axes.lines.pop(0)
        try:
            self.obliqueLine.remove()
        except:
            pass
         
        self.generateOblique()
        time.sleep(0.05)


    def generateOblique(self):
        
        val=self.slider.value()
        val2=511-self.slider2.value()
        self.point2= [511,511]
        if self.slider.value() >= 0 and self.slider2.value() >= 0:
            self.point2 = [511, self.slope * (511 - self.point[0])+self.point[1]] 
        elif self.slider.value() >= 0 and self.slider2.value() < 0:
            self.point2 = [((511-self.point[1]) / self.slope)+self.point[0], 511]
        elif self.slope  != 0 and self.slider2.value() <= 0:
            self.point2 = [((511-self.point[1]) / self.slope)+self.point[0], 511]
        elif self.slope  != 0 and self.slider2.value() > 0:
            self.point2 = [511, self.slope * (511 - self.point[0])+self.point[1]]    
        
        x = self.point[1] - self.point2[1]
        y = self.point2[0] - self.point[0]
        c = x*(self.point2[0]) + y*(self.point2[1])
  
        length=np.sqrt(pow((self.point[0]-self.point2[0]),2)+pow((self.point[1]-self.point2[1]),2))
        points=[]
        for i in range(int(length)):
            # print([round(((1-(i/length))*self.point[0]+(i/length)*self.point2[0])),round(((1-(i/length)*self.point[1]))+(i/length*self.point2[1]))])
            points.append([round(((1-(i/length))*self.point[0]+(i/length)*self.point2[0])),round(((1-(i/length)*self.point[1]))+(i/length*self.point2[1]))])
        obliqueImg=[]
        for j in range(len(points)):
            for k in range(234):
                try:
                    obliqueImg.append(self.volume_data[-points[j][1],-points[j][0],k])
                except:
                    pass
        try:
            obliqueImg=np.array(obliqueImg)
            Img=np.reshape(obliqueImg, (len(points),234))
            self.oblique.axes.imshow(np.rot90(np.rot90(np.rot90(Img))), cmap='gray',vmax=255, vmin=0 , origin='upper')
            self.oblique.draw()
        except:
            pass
        #self.horizontalLayout_4.addWidget(self.sagital)


  
####################

    def image_browsing(self):
        file_path = 0
        file_path = QFileDialog.getOpenFileName(
            filter=" NII (*.nii);;  DCM(*.dcm))")
        filename, file_extension = file_path
        img = nib.load(filename)
        self.volume_data = img.get_fdata()
        # self.volume_axial = volume_viewer(self.volume_data, 10 , self.axial.fig, self.axial.ax)
        # self.volume_coronal = volume_viewer(self.volume_data, 10 , self.coronal.fig, self.coronal.ax)
        # self.volume_sagital = volume_viewer(self.volume_data, 10 , self.sagital.fig, self.sagital.ax)
        self.axial.axes.imshow(
            self.volume_data[:, :, 90], cmap='gray', vmax=255, vmin=0 , origin='upper')
        self.sagital.axes.imshow(
           np.rot90(self.volume_data[0, :, :]), cmap='gray', vmax=255, vmin=0 , origin='lower')
        self.coronal.axes.imshow(
            np.rot90(self.volume_data[:,0 , :]), cmap='gray', vmax=255, vmin=0 , origin='upper')
        #self.oblique.axes.imshow(self.volume_data[:,:,166], cmap=plt.cm.gray)
        
        self.axialhline_axial = draggable_lines(self.axial.axes ,self.axial , self.canvas_arr , self.volume_data ,"h", 10)
        self.axialvline_axial = draggable_lines(self.axial.axes ,self.axial , self.canvas_arr ,self.volume_data , "v", 10)
        self.axialhline_sagital = draggable_lines(self.sagital.axes ,self.sagital , self.canvas_arr ,self.volume_data , "h", 10)
        self.axialvline_sagital = draggable_lines(self.sagital.axes ,self.sagital , self.canvas_arr ,self.volume_data , "v", 10)
        self.axialhline_coronal = draggable_lines(self.coronal.axes ,self.coronal , self.canvas_arr ,self.volume_data , "h", 10)
        self.axialvline_coronal = draggable_lines(self.coronal.axes ,self.coronal , self.canvas_arr , self.volume_data ,"v", 10)
        self.obliqueLine = self.axial.axes.axline([512,512],slope=1)
        self.elipselectors = []
        self.polyselectors = []
        self.diselectors = []
        self.drag_line_arr = [ self.axialhline_axial ,  self.axialvline_axial ,  self.axialhline_sagital ,  self.axialvline_sagital ,  self.axialhline_coronal ,  self.axialvline_coronal ]
        for i in range(len(self.drag_line_arr)-1)  :
            self.drag_line_arr[i].get_objects( self.drag_line_arr)
        self.horizontalLayout_4.addWidget(self.sagital)
        self.horizontalLayout_15.addWidget(self.coronal)
        self.horizontalLayout_13.addWidget(self.oblique)
        self.horizontalLayout_14.addWidget(self.axial)
        self.oblique.axes.set_xlim([0, 512])
        self.oblique.axes.set_ylim([0, 234])
        self.axial.axes.set_xlim([0, 512])
        self.axial.axes.set_ylim([0, 512])
        self.slider.valueChanged.connect(self.dOblique)
        self.slider2.valueChanged.connect(self.dOblique)



        self.oblique.draw()
        self.axial.draw()
        self.setData()
        #self.oblique.draw()

    def selector_tool(self):
        for self.linee in self.drag_line_arr:
            self.linee.line.set_visible(False)
            self.linee.disconnect_functions()
            self.obliqueLine.set_visible(False)
            self.axial.draw()
            self.coronal.draw()
            self.sagital.draw()
        if len(self.elipselectors) != 0:
            for selector in self.elipselectors:
                selector.elipse.set_active(True)
        else:
            self.views = [self.axial , self.sagital , self.coronal , self.oblique ]
            
            for nums ,view  in enumerate(self.views) :
                
                self.elipselectors.append(SelectFromellipse(view.axes, self.tableView ,nums ))

    def disselector_tool(self):
            for self.linee in self.drag_line_arr:
                self.linee.line.set_visible(False)
                self.linee.disconnect_functions()
                self.obliqueLine.set_visible(False)
                self.axial.draw()
                self.coronal.draw()
                self.sagital.draw()
            if len(self.diselectors) != 0:
                for selector in self.elipselectors:
                    selector.elipse.set_active(True)
            else:
                self.views = [self.axial , self.sagital , self.coronal , self.oblique ]
                
                for nums ,view  in enumerate(self.views) :
                    
                    self.diselectors.append(linedistance(view.axes, self.tableView ,nums ))


    def polygon_tool(self):
        for self.linee in self.drag_line_arr:
            self.linee.line.set_visible(False)
            self.linee.disconnect_functions()
            self.obliqueLine.set_visible(False)
            self.axial.draw()
            self.coronal.draw()
            self.sagital.draw()
            self.polyselectors = []
            self.views = [self.axial , self.sagital , self.coronal , self.oblique ]
            for  nums, view in  enumerate(self.views) :
                self.polyselectors.append(SelectFromCollection(view.axes,self.tableView ,nums ))


    def remove_tools(self):
        for self.linee in self.drag_line_arr:
            self.linee.line.set_visible(True)
            self.obliqueLine.set_visible(False)
            self.linee.connect_functions()
            self.axial.draw()
            self.coronal.draw()
            self.sagital.draw()

        if len(self.elipselectors) != 0:
            for selector in self.elipselectors:
                selector.elipse.set_active(False)

        if len(self.polyselectors) != 0:
            for selector in self.polyselectors:
                selector.callback_clear_selection()
        
        if len(self.diselectors) != 0:
            for selector in self.diselectors:
                selector.lasso.set_active(False)
    
                



    

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.groupBox.setTitle(_translate("MainWindow", "oblique sliders"))
        self.groupBox_2.setTitle(_translate("MainWindow",  "info", None))
        self.toolBar.setWindowTitle(_translate("MainWindow", "toolBar"))
        self.Browse.setText(_translate("MainWindow", "browse"))
        self.Browse.setToolTip(_translate(
            "MainWindow", "<html><head/><body><p>Browse</p></body></html>"))
        self.clear.setText(_translate("MainWindow", "clear"))
        self.clear.setToolTip(_translate("MainWindow", "clear"))
        self.clear.setShortcut(_translate("MainWindow", "Ctrl+C"))
        self.actionaxis.setText(_translate("MainWindow", "axis"))
        self.actiontext_box.setText(_translate("MainWindow", "file"))
        self.actiontext_box.setToolTip(_translate(
            "MainWindow", "<html><head/><body><p><span style=\" font-weight:700; font-style:italic; color:#fffff;\">file</span></p></body></html>", None))
        self.action.setText(_translate("MainWindow", "edit"))
        self.action.setToolTip(_translate("MainWindow", "edit"))
        self.actionscreenshot.setText(_translate("MainWindow", "screenshot"))


if __name__ == "__main__":

    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)

    MainWindow.show()
    sys.exit(app.exec_())
